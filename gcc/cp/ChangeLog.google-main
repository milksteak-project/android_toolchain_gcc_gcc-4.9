2012-06-09   Xinliang David Li  <davidxl@google.com>

	Backport r188365 from google-4_7
	* decl.c (poplevel): Start/stop timer conditionally.
	* decl2.c (cp_write_gloobal_declarations): Stop timer
	in non-lipo mode.

2011-12-19  Sterling Augustine <saugustine@google.com>

	* error.c (dump_decl): Reformat return value to "(anonymous namespace)".
	(lang_decl_name): Return "(anonymous namespace)" when appropriate.

2011-12-17   Easwaran Raman  <eraman@google.com>

	* decl.c (cxx_init_decl_processing): Specify a function that
	  takes a void* and size_t for DELETE_EXPR.
	* call.c (build_op_delete_call): If fsized-delete is used, use
	  the variant that takes size_t as the second parameter except
	  when deleteting a pointer of type void *.

2011-09-15   Diego Novillo  <dnovillo@google.com>

	* init.c (perform_member_init): Move check for self-assignment
	to the end of the function.

2011-07-21  David Li  <davidxl@google.com>

	* decl2.c (cp_write_global_declarations): Call
	cgraph_process_same_body_aliases.

2011-07-21  Diego Novillo  <dnovillo@google.com>

	* class.c (cp_fold_obj_type_ref): Call cgraph_get_create_node
	instead of cgraph_node.
	* cp-objcp-common.c (cp_save_built_in_decl_post_parsing): Likewise.
	* decl2.c (cp_process_pending_declarations): Likewise.
	* semantics.c (emit_associated_thunks): Likewise.

2011-07-21  David Li  <davidxl@google.com>

	* decl2.c (cp_write_global_declarations): Call
        cgraph_process_same_body_aliases.

2011-07-11   DeLesley Hutchins  <delesley@google.com>

      * class.c (cp_get_virtual_function_decl): Return null if
      the method cannot be found.

2011-05-06  Lawrence Crowl  <crowl@google.com>

	* decl.c: (push_local_name): Change TV_NAME_LOOKUP to start/stop.
	(poplevel): Refactor POP_TIMEVAR_AND_RETURN to plain code.
	Change TV_NAME_LOOKUP to start/stop.
	(define_label): Refactor timevar calls out to a wrapper function.
	Change TV_NAME_LOOKUP to start/stop.
	(xref_tag): Likewise.
	(lookup_label): Refactor timevar calls out to a wrapper function.
	Change TV_NAME_LOOKUP to start_cond/stop_cond.

        * pt.c: (instantiate_class_template): Add a wrapper to push/pop new
	TV_TEMPLATE_INST.
	(instantiate_template): Add a wrapper to push/pop new TV_TEMPLATE_INST.
	(lookup_template_class): Refactor timevar calls out to a wrapper
	function.  Change use of TV_NAME_LOOKUP to TV_TEMPLATE_INST.
	(instantiate_decl): Change TV_PARSE to TV_TEMPLATE_INST.

	* name-lookup.c: (store_bindings): Change TV_NAME_LOOKUP to start/stop.
	(poplevel_class): Change TV_NAME_LOOKUP to start_cond/stop_cond.
	(push_namespace): Likewise.
	(pop_nested_namespace): Likewise.
	(pushdecl_namespace_level): Likewise.
	(store_class_bindings): Likewise.
	(push_to_top_level): Likewise.
	(identifier_type_value): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start/stop.
	(find_binding): Likewise.
	(push_using_decl): Likewise.
	(lookup_arg_dependent): Likewise.
	(push_using_directive): Likewise.
	(qualified_lookup_using_namespace): Refactor POP_TIMEVAR_AND_RETURN
	to plain code.  Change TV_NAME_LOOKUP to start/stop.
	(lookup_type_current_level): Likewise.  Refactor inner return to
	break.
	(pushdecl_class_level): Refactor POP_TIMEVAR_AND_RETURN to plain
	code.  Change TV_NAME_LOOKUP to start_cond/stop_cond.
	(pushdecl_top_level_1): Likewise.
	(lookup_using_namespace): Likewise.
	(pushdecl_with_scope): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start_cond/stop_cond.
	(push_overloaded_decl): Likewise.
	(push_class_level_binding): Likewise.
	(namespace_binding): Likewise.
	(set_namespace_binding): Likewise.
	(supplement_binding): Likewise.
	(unqualified_namespace_lookup): Likewise.
	(lookup_name_real): Likewise.
	(lookup_type_scope): Likewise.
	(namespace_ancestor): Likewise.
	(lookup_name_innermost_nonclass_level): Likewise.
	(pushtag): Likewise.
	(pop_from_top_level): Likewise.
	(pushdecl_maybe_friend): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start_cond/stop_cond.  Wrap long
	lines.
	(add_using_namespace): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start_cond/stop_cond.  Bypass
	wrapper on call to self.

	* decl2.c: (cp_write_global_declarations):  Add start/stop of
	new TV_PHASE_DEFERRED, TV_PHASE_CGRAPH, TV_PHASE_CHECK_DBGINFO.
	Remove push/pop calls to TV_VARCONST.

	* parser.c: Add include of "timevar.h".
	(cp_parser_explicit_instantiation): Add push/pop calls to
	TV_TEMPLATE_INST.
	(cp_parser_enum_specifier): Add push/pop calls to new TV_PARSE_ENUM.
	(cp_parser_class_specifier): Add wrapper to add push/pop calls to
	TV_PARSE_STRUCT.
	(cp_parser_function_definition_from_specifiers_and_declarator): Add
	push/pop calls to new TV_PARSE_FUNC or TV_PARSE_INLINE.
	(cp_parser_late_parsing_for_member):  Add push/pop calls to
	new TV_PARSE_INMETH.

	* call.c: Add include of "timevar.h".
        (convert_class_to_reference): Wrap and add push/pop calls to 
	TV_OVERLOAD.
	(build_op_call): Likewise.
	(build_conditional_expr): Likewise.
	(build_new_op): Likewise.
	(build_new_method_call): Likewise.
        (build_user_type_conversion): Reorganize to single return and add
	push/pop calls to TV_OVERLOAD.
        (perform_overload_resolution): Likewise.

	* Make-lang.in: Add dependence of call.o and parser.o on $(TIMEVAR_H).

2011-05-01  David Li  <davidxl@google.com>

	* cp/cp-objcp-common.c (cmp_templ_arg): Use assembler name for
	decl comparison.

2011-04-28  Diego Novillo  <dnovillo@google.com>
	    Le-Chun Wu  <lcwu@google.com>

	Google ref 40484.

	* call.c (conversion_null_warnings): Also handle assignments
	when warning about NULL conversions.

2011-04-27  Le-Chun Wu  <lcwu@google.com>

	Google ref 39127.

	* name-lookup.c (pushdecl_maybe_friend): When emitting a
	shadowing warning, use the code corresponding to the
	given -Wshadow- variant.

2011-04-27  Le-Chun Wu  <lcwu@google.com>

	Google ref 40484.

	* cp-tree.h (LOOKUP_EXPLICIT_TMPL_ARGS): Define.
	* call.c (build_new_function_call): Set it for TEMPLATE_ID_EXPRs.
	(build_over_call): Use it to determine whether to emit a NULL
	warning for template function instantiations.
	(build_new_method_call): Set LOOKUP_EXPLICIT_TMPL_ARGS if
	EXPLICIT_TARGS is set.

2011-04-26  Le-Chun Wu  <lcwu@google.com>

	* init.c (perform_member_init): Check for self-assign.
	* parser.c (expr_is_pod): New function.
	(cp_parser_assignment_expression): Check for self-assign.
	(cp_parser_init_declarator): Check for self-assign.

2011-04-25  David Li  <davidxl@google.com>

	* decl.c (walk_namespaces): Ditto.
	(duplicate_decls): Ditto.
	(make_rtl_for_nonlocal_decl): Ditto.
	* rtti.c (get_tinfo_decl): Ditto.
	(create_pseudo_type_info): Ditto.
	(create_tinfo_types): Ditto.
	* cp-lang.c (cp_classify_record): Ditto.
	* pt.c (instantiate_decl): Ditto.
	* semantics.c (emit_associated_thunks): Ditto.
	* decl2.c (start_static_storage_duration_function): Ditto.
	(prune_vars_needing_no_initialization):  Ditto.
	(cxx_callgraph_analyze_expr): Ditto.
	(no_linkage_error): Ditto.
	(collect_all_refs): Ditto.
	(cp_write_global_declarations): Ditto.
	* parser.c (pragma_lex): Ditto.
	* cp-objcp-common.c (cp_function_decl_explicit_p): Ditto.
	* mangle.c (mangle_conv_op_name_for_type): Ditto.
	* name-lookup.c (add_decl_to_level): Ditto.

Copyright (C) 2011 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
