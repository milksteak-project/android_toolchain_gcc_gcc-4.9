2012-09-28  Rong Xu  <xur@google.com>

	Port r191834 from google-4_7 branch

	Google Ref: b/7005205.
	* gcc/coverage.c (coverage_checksum_string): strip out LIPO 
	specific string. 
	(crc32_string_1): New function.
	* gcc/cp/decl2.c (start_static_storage_duration_function):
	generate LIPO specific string.
	
2012-09-25  Xinliang David Li  <davidxl@google.com>

        Port r191763 from google-4_7 branch

	* varasm.c (finish_alias_1):  Fix mis-fired error
	for extern alias (same-body) in LIPO mode.

2012-09-25  Rong Xu  <xur@google.com>

	Port r191682 from google-4_7 branch

	Google Ref: b/7210837 and b/7210303. 
	* gcc/coverage.c (force_matching_cg_opts): add new entries.

2012-09-25  Rong Xu  <xur@google.com>

	Port r191681 from google-4_7 branch

	Google ref b/7078882.
	* gcc/l-ipo.c (cgraph_is_aux_decl_external): output comdat virtual
	functions when they are auxiliary modules; otherwise we may get
	undefined symbol in linking.

2012-09-24  Xinliang David Li  <davidxl@google.com>

	Port r191689 from google-4_7 branch

        * df-problems.c (df_check_ud_du_memory_usage): New function.
        * ree.c (rest_of_handle_ree): Suppress ree if it requires
          too much memory.
        * dce.c (rest_of_handle_ud_dce): Ditto.

2012-09-13  Han Shen  <shenhan@google.com>

	* backport r190600 from google/gcc-4_7 branch

		2012-08-22  Han Shen  <shenhan@google.com>

	        Fixed the problem that LINUX_GRTE_EXTRA_SPECS overrides
	        SUBTARGET_EXTRA_SPECS by prepending LINUX_GRTE_EXTRA_SPECS to
	        SUBTARGET_EXTRA_SPECS.

	        * gcc/config/i386/gnu-user.h (SUBTARGET_EXTRA_SPECS_STR): Add
	        new MACRO to hold value of SUBTARET_EXTRA_SPECS so that
	        SUBTARET_EXTRA_SPECS could be replaced later in gnu-user.h

	        * gcc/config/i386/linux.h (SUBTARGET_EXTRA_SPECS): Compute new value
	        of LINUX_GRTE_EXTRA_SPECS by pre-pending LINUX_GRTE_EXTRA_SPECS to its
	        origin value.

2012-09-13  Xinliang David Li  <davidxl@google.com>

	* backport r191268 from google/gcc-4_7 branch

2012-09-10  Teresa Johnson  <tejohnson@google.com>

	* loop-unroll.c (code_size_limit_factor): Guard against divide
	by zero exception.

2012-08-28  Chris Manghane  <cmang@google.com>

	* gcc/gcov.c
	(release_structures): Removed filename field from PMU structures.
	(filter_pmu_data_lines): Added PMU string table support.
	(process_pmu_profile): Ditto.
	* gcc/gcov-io.c
	(gcov_read_pmu_load_latency_info): Replaced filename field with filetag.
	(gcov_read_pmu_branch_mispredict_info): Ditto.
	(gcov_read_pmu_string_table_entry): New Function.
	(print_load_latency_line): Replaced filename field with filetag.
	(print_branch_mispredict_line): Ditto.
	(print_string_table_entry): New function.
	* gcc/gcov-io.h
	(GCOV_TAG_PMU_LOAD_LATENCY_LENGTH): Replaced filename field with filetag
	(GCOV_TAG_PMU_BRANCH_MISPREDICT_LENGTH): Ditto.
	(GCOV_TAG_PMU_STRING_TABLE_ENTRY): Added new tag.
	(GCOV_TAG_PMU_STRING_TABLE_ENTRY_LENGTH): Ditto.
	(gcov_pmu_load_latency_info): Replaced filename field with filetag.
	(gcov_pmu_branch_mispredict_info): Ditto.
	(gcov_pmu_string_table_entry): New struct.
	(gcov_pmu_string_table): New struct.
	(gcov_write_ll_line): Moved pmu writing utilities to global header.
	(gcov_write_branch_mispredict_line): Ditto.
	(gcov_write_string_table_entry): Ditto.
	(gcov_write_tool_header): Ditto.
	* gcc/gcov-dump.c
	(tag_pmu_load_latency_info): Removed PMU filename field.
	(tag_pmu_branch_mispredict_info): Ditto.
	(tag_pmu_string_table_entry): New function.

2012-08-23   Xinliang David Li  <davidxl@google.com>

	Port r190637 from google-4_7 branch
	*coverage.c (check_cg_opts): New function.
	(has_incompatible_cg_opts): Ditto.
	(incompatible_cl_args): Handle incompatible cg
	options more generally, and added -fsized-delete.

2012-08-13  Xinliang David Li  <davidxl@google.com>

	Port r190373 from google-4_7 branch
	Google ref/6911651
	* tree-ssa.c (warn_uninitialized_vars): Guard
	possibly uninitialized warning under
	-Wmaybe-uninitialized

2012-07-24  Xinliang David Li  <davidxl@google.com>

	Backport r189827 from google-4_7 branch
	* diagnostic.c (diagnostic_initialize): Initialize
	new field.
	(diagnostic_report_diagnostic): Honor -Wforce-warnings.
	* diagnostic.h: New field.
	* opts.c (common_handle_option): Handle new option.
	* coverage.c (get_da_file_name): Handle new option.
	* common.opt: New options.


2012-07-19  Rong Xu  <xur@google.com>

	* gcc/gcov-io.h (GCOV_TAG_MODULE_INFO): tag needs to be
	an odd number in each active level.

2012-06-29  Xinliang David Li  <davidxl@google.com>

	Port r189088 from google_4-7 branch
	* coverage.c (coverage_init): Initialize dyn-ipa
	paramater decls.
	* tree-profile.c (init_comdat_decl): New function.
	(tree_init_dyn_ipa_paramters): Ditto.


2012-06-15   Cary Coutant  <ccoutant@google.com>

    Revert Fission patches r182490, r182891, r183042, and r183320.
    These will be going into trunk, and will eventually merge back into
    google/main from there.

    r182490:

	2011-12-19  Sterling Augustine <saugustine@google.com>

	    * dwarf2out.c (DEBUG_PUBNAMES_SECTION_LABEL,
	    DEBUG_PUBTYPES_SECTION_LABEL): Define.
	    (debug_pubnames_section_label, debug_pubtypes_section_label):
	    Declare.
	    (is_namespace_die, is_class_die): New functions.
	    (add_enumerator_pubname): New function.
	    (add_pubname): Call is_namespace_die, is_cu_die, and is_class_die in
	    conditional.
	    (add_pubtype): Call is_namespace_die. Rework name calculation.  Call
	    type_tag, lang_hooks.dwarf_name and add_enumerator_pubname.
	    (output_pubnames): Output debug_pubnames_section_label or
	    debug_pubtypes_section_label.
	    (base_type_die): Call add_pubtype.
	    (gen_namespace_die): Call add_pubname_string and lang_hooks.dwarf_name.
	    (dwarf2_out_init): Generate debug_pubnames_section_label and
	    debug_pubtypes_section_label.
	    (pubtypes_section_empty): New function.
	    (dwarf2_out_finish): Call add_AT_lineptr if pubnames or pubtypes is
	    non-empty.  When dealing with pubnames, change assertion to conditional.
	    Call pubtypes_section_empty.  Likewise when dealing with pubtypes.
	    Move code checking for empty section to...
	    (pubtypes_section_empty): Here.
	    * target.def: Switch boolean to enable pubnames and pubtypes.

    r182891:

	2012-01-04   Sterling Augustine  <saugustine@google.com>

	    * dwarf2out.c (add_pubname): Move conditional clause from outer to
	    inner if-statement.
	    (dwarf2out_finish): Fix conditions to output DW_AT_GNU_pubnames and
	    DW_AT_GNU_pubtypes.  Move decision to output pubnames and pubtypes from
	    here...
	    (output_pubnames): ...to here.
	    (pubtypes_section_empty): Delete unused function.

    r183042:

	2012-01-09   Sterling Augustine  <saugustine@google.com>

	    * dwarf2out.c (output_pubnames): Add check for info_section_emitted.

    r183320:

	2012-01-19   Sterling Augustine  <saugustine@google.com>

	    * dwarf2out.c (break_out_comdat_types): Add DW_AT_GNU_pubnames and
	    DW_AT_GNU_pubtypes attributes.

2012-06-10  Dehao Chen  <dehao@google.com>

	Backport r188303 from google-4_7
	* gcc/cgraph.c (cgraph_node): Add attribute to function decl.
	* gcc/opts-global.c (add_attribute_pattern): New function.
	(pattern_match_function_attributes): New function.
	(handle_common_deferred_options): Handle new options.
	* gcc/opts.c (common_handle_option): Handle new options.
	* gcc/opts.h (handle_common_deferred_options): New function.
	* gcc/common.opt (ffunction_attribute_list): New option.

2012-06-09   Xinliang Davidl Li  <davidxl@google.com>

	Backport r188365 from google-4_7
	l-ipo.c (pop_module_scope): Stop timer after
	pending decl handling.

2012-06-09   Xinliang Davidl Li  <davidxl@google.com>

	Backport r188363 from google-4_7 branch
	c-family/c-opts.c (lipo_max_mem_reached):  Scale up
	memory allocated to acount for optimizer uses.
	params.def: tune up max lipo mem parameter to 2.8G.

2012-06-07   Easwaran Raman  <eraman@google.com>
  Backport r179412 from google/gcc-4_6 branch.
	2011-09-30  Easwaran Raman  <eraman@google.com>

		* tree-profile.c (gcov_sample_counter_decl): Add GTY marker.
		(gcov_sampling_rate_decl): Likewise.
		(add_sampling_to_edge_counters): Do not free
		instrumentation_to_be_sampled.
		(cleanup_instrumentation_sampling): New function.
		(tree_profiling): Call cleanup_instrumentation_sampling at the end.

2012-06-07  Teresa Johnson  <tejohnson@google.com>

	* doc/invoke.texi: Rename -fripa-peel-size-limit
        and -fripa-unroll-size-limit to -fpeel-codesize-limit and
        -funroll-codesize-limit, respectively. Remove
        codesize-hotness-threshold param and add unrollpeel-hotness-threshold
        param.
	* gcov-io.c (gcov_write_summary): Write new summary info.
	(gcov_read_summary): Read new summary info.
	* gcov-io.h (GCOV_TAG_SUMMARY_LENGTH): Update for new summary info.
        (struct gcov_ctr_summary): Add new summary info: num_hot_counters.
	* loop-unroll.c (limit_code_size): Renamed to
        code_size_limit_factor.
	(code_size_limit_factor): Renamed from limit_code size. Update to
        use new summary info and refine for very hot loops.
	(decide_unrolling_and_peeling): Remove call to limit_code_size.
        (decide_unroll_runtime_iterations): Call code_size_limit_factor
        to control the unroll factor.
	(decide_peel_simple, decide_unroll_stupid): Ditto.
	* coverage.c (read_counts_file): Propagate new summary info.
	* common.opt: Rename -fripa-peel-size-limit
        and -fripa-unroll-size-limit to -fpeel-codesize-limit and
        -funroll-codesize-limit, respectively.
	* tree-optimize.c (cgraph_codesize_estimate): Remove.
	(compute_codesize_estimate): Remove.
	(execute_cleanup_cfg_post_optimizing): Remove call to
        compute_codesize_estimate.
	* params.def (PARAM_UNROLLPEEL_CODESIZE_THRESHOLD): Remove.
        (PARAM_UNROLLPEEL_HOTNESS_THRESHOLD): Add.
	* gcov-dump.c (tag_summary): Dump new summary info.

>>>>>>> .r191689
2012-06-06   Xinliang David Li  <davidxl@google.com>

	Backport r188271 from google-4_7
	coverage.c (coverage_finish): Do not remove gcda file with
	-frandom-seed option -- this recovers the compiler behavior
	before gcc4_7.

2012-06-02  Xinliang David Li  <davidxl@google.com>

	Backport 188161 from google-4_7 branch.

	l-ipo.c (promote_static_var_func): Promoted static variables from
	primary modules should be marked as externally visible and being
	prevailing def to avoid being localized again later.

2012-05-30  Dehao Chen  <dehao@google.com>

	* predict.c (predict_extra_loop_exit): New function to predict for
	extra loop exits resulted from short-circuit conditions.

2012-05-18   Teresa Johnson  <tejohnson@google.com>

	This entry goes with r187660.

	* doc/invoke.texi: Update the documentation with new params.
	* loop-unroll.c (loop_has_FP_comp): Remove function.
	(max_unroll_with_branches): New function.
	(decide_unroll_constant_iterations, decide_unroll_runtime_iterations):
        Add heuristic to avoid increasing branch mispredicts when unrolling.
	(limit_code_size, decide_peel_simple, decide_unroll_stupid): Retrieve
        number of branches from niter_desc instead of via function that walks
        loop.
	* loop-iv.c (get_simple_loop_desc): Invoke new analyze_loop_insns
        function, and add guards to enable this function to work for the
        outermost loop.
	* cfgloop.c (insn_has_fp_set, analyze_loop_insns): New functions.
        (num_loop_branches): Remove.
	* cfgloop.h (struct niter_desc): Added new fields to cache additional
        loop analysis information.
        (num_loop_branches): Remove.
	(analyze_loop_insns): Declare.
	* params.def (PARAM_MIN_ITER_UNROLL_WITH_BRANCHES): New param.
        (PARAM_UNROLL_OUTER_LOOP_BRANCH_BUDGET): Ditto.

2012-05-16  Xinliang David Li  <davidxl@google.com>

	Backport r187613 from google/gcc-4_7 branch.

2012-05-16  Xinliang David Li  <davidxl@google.com>

	Backport r187610 from google/gcc-4_7 branch.

2012-05-16  Xinliang David Li  <davidxl@google.com>

	Backport r187602 from google/gcc-4_7 branch.

2012-05-15   Teresa Johnson  <tejohnson@google.com>

	* doc/invoke.texi (profile-generate-sampling-period): Rename
	from profile-generate-sampling-rate.
	* tree-profile.c (gcov_sampling_period_decl): Rename from
	gcov_sampling_rate_decl.
	(gcov_has_sampling_decl): New variable.
	(insert_if_then, add_sampling_wrapper): Rename variables from "*rate*"
	to "*period*".
	(gimple_init_instrumentation_sampling): Ditto, and add handling
	for gcov_has_sampling_decl.
	* params.def (profile-generate-sampling-period): Rename
	from profile-generate-sampling-rate.

2012-05-14  Xinliang David Li  <davidxl@google.com>

	Backport r187488 from google/gcc-4_7
	* cgraphbuild.c (record_reference_to_real_target_from_alias):
	New function.
	(mark_address): Record reference to the resolved target node
	in LIPO mode. Also record reference to alias's real target.
	(rebuild_cgraph_edges): As above.
	* cgraph.c (cgraph_clone_edge): Create cgraph edge for
	indirect call inlining edge properly.
	* l-ipo.c (cgraph_lipo_get_resolved_node_1): Do not force
	creating cgraph node.
	(fixup_reference_list): New function.
	(varpool_do_link): Fix up initializer's references to functions
	after linking.

2012-05-09  Teresa Johnson  <tejohnson@google.com>

	Backport from trunk r187297:
	2012-05-08   Teresa Johnson  <tejohnson@google.com>

	* gcov-io.h (__gcov_reset, __gcov_dump): Declare.
	* doc/gcov.texi: Add note on using __gcov_reset and __gcov_dump.

2012-05-08  Xinliang David Li  <davidxl@google.com>

	Fix issue 6457844 (backport r187312 from google-4_7)

	* ipa-inline-transform.c (inline_call): When
	fixing up cgraph edge callees which are aliases,
	find the real resolved alias target in LIPO mode.
	* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee):
	Remove unnecssary check in LIPO mode.
	* ipa-inline.c (inline_small_functions): Compute
	max_count properly by considering indirect edges.


2012-05-08  Xinliang David Li  <davidxl@google.com>

	Fix issue 6461583 (backport r187310 from google-4_7)

	* profile.c (instrument_values): Skip static ctor/dtors
	for ic counter allocation to match instrumentation.
	* tree-profile.c (gimple_gen_ic_profiler): Remove
	unnecessary guard in FDO mode.


2012-05-01   Rong Xu  <xur@google.com>

	* gcc/cp/rtti.c (get_tinfo_decl): generate tinfo for aux 
	modules in LIPO.

>>>>>>> .r187488
2012-04-15  Xinliang David Li  <davidxl@google.com>

	* varasm.c (alias_target_node_exist_p): New function.
	(finish_alias_1): Use the new function in LIPO mode.

2012-04-12  Xinliang David Li  <davidxl@google.com>

	* cgraphbuild.c (rebuild_cgraph_edges): Add ipa reference from
	an alias node to its body node (post LIPO linking one) to avoid
	the body being eliminated.
	* varasm.c (finish_aliases_1): Do not emit error for an alias
	which is artificial in LIPO mode -- it exists but can not be
	found.

2012-04-11  Teresa Johnson  <tejohnson@google.com>

	Revert r182254 since it is subsumed by r186176 on trunk.
	Limit unrolling of loops with LCP stalling instructions on Core i7
	so that they will fit into the LSD.
	* loop-unroll.c (decide_unroll_constant_iterations): Call loop
	unroll target hook.
	* config/i386/i386.c (ix86_loop_unroll_adjust): New function.
	(TARGET_LOOP_UNROLL_ADJUST): Define hook for x86.

2012-04-10  Xinliang David Li  <davidxl@google.com>

	* mversn-dispatch.c (builtin_dispatch_ipa_clone): returns
	TODO flags when there are changes.
	(do_convert_builtin_dispatch): Ditto.


2012-04-09  Xinliang David Li  <davidxl@google.com>

	Fix b/6300341: LIPO profile-gen ICEs 

	* coverage.c (converage_dc_end_function): Properly initialize
	the fn_decl and ctr_data field of the coverage_data.

2012-04-03  Harshit Chopra  <harshit@google.com>

	* config/i386/i386.c (check_should_patch_current_function): Made C90
	compatible.
	* config/i386/i386.md: Added '\t' to bytes generated by
	ix86_output_function_nops_prologue_epilogue for proper formatting
	of assembly.

2012-03-29  Dehao Chen  <dehao@google.com>

	* predict.c (predict_iv_comparison): Add the comparison of induction
	variable against its initial value.

2012-03-09   Rong Xu  <xur@google.com>

	* opts-global.c (lipo_save_cl_args): save -std option.
	Google ref b/6117980.

2012-03-07  Sriraman Tallam  <tmsriram@google.com>

	* config/i386/i386.c (build_struct_with_one_bit_fields): New function.
	(make_var_decl): New function.
	(get_field_from_struct): New function.
	(fold_builtin_target): New function.
	(ix86_fold_builtin): New function.
	(ix86_expand_builtin): Expand new builtins by folding them.
	(make_platform_builtin): New functions.
	(ix86_init_platform_type_builtins): Make the new builtins.
	(ix86_init_builtins): Make new builtins to detect CPU type.
	(TARGET_FOLD_BUILTIN): New macro.
	(IX86_BUILTIN_CPU_SUPPORTS_CMOV): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_MMX): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_POPCOUNT): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE2): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE3): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSSE3): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE4_1): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE4_2): New enum value.
	(IX86_BUILTIN_CPU_INIT): New enum value.
	(IX86_BUILTIN_CPU_IS_AMD): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_ATOM): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_CORE2): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7_NEHALEM): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7_WESTMERE): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7_SANDYBRIDGE): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10_BARCELONA): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10_SHANGHAI): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10_ISTANBUL): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM15H_BDVER1): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM15H_BDVER2): New enum value.
	* config/i386/i386-builtin-types.def: New function type.
	* testsuite/gcc.target/builtin_target.c: New testcase.

2012-03-05   Xinliang David Li  <davidxl@google.com>
	* Merged revisions 184824,184851 via svnmerge from 
	svn+ssh://gcc.gnu.org/svn/gcc/branches/google/integration

2012-03-04   Xinliang David Li  <davidxl@google.com>

	* Merged revisions 184370,184482,184682 via svnmerge from 
	svn+ssh://gcc.gnu.org/svn/gcc/branches/google/integration

2012-02-14  Jing Yu  <jingyu@google.com>

	Google ref 42402-p2
	* config/arm/arm.h: Emit GNU-stack note for all arm targets by
	default.

2012-02-13   Xinliang David Li  <davidxl@google.com>

	* coverage.c: (process_include_paths): New function.
	(process_include_paths_1): New function.
	(process_include): New function.
	(set_lipo_c_parsing_context): Process option -fripa-inc-path-sub=


2012-02-13   Xinliang David Li  <davidxl@google.com>

	* tree-optimize.c (execute_fixup_cfg): Using double type in
	scaling to avoid count overflow during out-of-line copy
	fixup. (ref: google-4_6 r184162)

2012-02-06   Dmitriy Vyukov  <dvyukov@google.com>

	Port revision 183839 from google/gcc-4_6 branch.
	* tree-tsan.c: Code style changes.

2012-02-01  Xinliang David Li  <davidxl@google.com>

	* diagnostic.c (diagnostic_set_info_translated):
	strip discriminator for location used in messages.
	* loop-unroll.c (unroll_and_peel_loops):
	remove exit recording which is redundant.

2012-02-01  Dehao Chen  <dehao@google.com>

	* predict.c (strips_small_constant): New
	(get_base_value): New
	(find_ssa_name_in_assign_stmt): New
	(is_comparison_with_loop_invariant_p): New
	(expr_coherent_p): New
	(predict_iv_comparison): New
	(predict_loops): Add heuristic for loop-nested branches that compare an
	induction variable to a loop bound variable.
	* predict.def (PRED_LOOP_IV_COMPARE): New macro

2012-01-31  Xinliang David Li  <davidxl@google.com>

	* Merged revisions 183740 via svnmerge from 
	svn+ssh://gcc.gnu.org/svn/gcc/branches/google/integration
	* Resolved merge conflicts
	* Changed libgcov.c to match upstream's handling of crc
	computation

2012-01-27  Xinliang David Li  <davidxl@google.com>

	Merged revisions 179852,180436,182413,182518 via svnmerge from
	svn+ssh://gcc.gnu.org/svn/gcc/branches/google/integration.
	Fixed new regressions and FDO/LIPO failures.


2012-01-26  Han Shen  <shenhan@google.com>

	Add a new option "-fstack-protector-strong".
	* cfgexpand.c (expand_used_vars): Add logic handling
	stack-protector-strong.
	(record_or_union_type_has_array): New, tests if a record or union type
	contains an array.
	* common.opt (fstack-protector-strong): New option.

2012-01-25   Harshit Chopra  <harshit@google.com>

	Introduce a new option -mpatch-functions-for-instrumentation to
	generate Nops at function prologue and epilogue for dynamic
	instrumentation.
	* gcc/config/i386/i386-protos.h: Added function and macro definitions
	for function patch sections used globally.
	* gcc/config/i386/i386.c (check_should_patch_current_function): Check
	if the current function should be patched with Nops.
	(ix86_output_function_prologue): Output Nops for function prologue.
	(ix86_output_function_nops_prologue_epilogue): Helper function which
	outputs Nops for function prologue and epilogue.
	(ix86_elf_asm_named_section): Generate the name of the function patch
	section.
	(ix86_output_call_insn): Generate nops for sibling calls.
	* gcc/config/i386/i386.md: Generate nops for returns.
	* gcc/config/i386/i386.opt: Commandline options to control nops
	generation for function patching.
	* gcc/params.def (DEFPARAM): Define parameter to control generation
	of nops based on number of instructions in a function
	* gcc/testsuite/gcc.target/i386/patch-functions-1.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-2.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-3.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-4.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-5.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-6.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-7.c: New testcase

2012-01-13   Xinliang David Li  <davidxl@google.com>

	*ipa-inline-analysis.c (do_estimate_edge_growth): Skip fake edges.

2012-01-12   Rong Xu  <xur@google.com>

	* gcc/profile.c (compute_value_histograms): ignore the 
	        histrogram when the counters not found in gcda file.

2011-12-21   Rong Xu  <xur@google.com>

	* gcc/profile.c (compute_value_histograms): handle the 
	case when INDIR_CALL counters not available in gcda files.

2012-01-09   Sterling Augustine  <saugustine@google.com>

       * dwarf2out.c (output_pubnames): Add check for info_section_emitted.

2012-01-09  Dehao Chen  <dehao@google.com>

	* ipa-inline-transform.c (cgraph_node_opt_info): Print profile info
	if available.
	(dump_inline_decision): Disable einline dump at OPT_INFO_MIN.
	* ipa-inline.h (is_in_ipa_inline): New variable.
	* ipa-inline.c (inline_small_functions): Set the current inline phase.

2012-01-04   Sterling Augustine  <saugustine@google.com>

	* dwarf2out.c (add_pubname): Move conditional clause from outer to
	inner if-statement.
	(dwarf2out_finish): Fix conditions to output DW_AT_GNU_pubnames and
	DW_AT_GNU_pubtypes.  Move decision to output pubnames and pubtypes from
	here...
	(output_pubnames): ...to here.
	(pubtypes_section_empty): Delete unused function.

2012-01-02  Dehao Chen  <dehao@google.com>

	* ipa-inline.c (cgraph_node_opt_info): Print more concise info when
	dumping inline decisions.

2011-12-19  Sterling Augustine <saugustine@google.com>

	* dwarf2out.c (DEBUG_PUBNAMES_SECTION_LABEL,
	DEBUG_PUBTYPES_SECTION_LABEL): Define.
	(debug_pubnames_section_label, debug_pubtypes_section_label):
	Declare.
	(is_namespace_die, is_class_die): New functions.
	(add_enumerator_pubname): New function.
	(add_pubname): Call is_namespace_die, is_cu_die, and is_class_die in
	conditional.
	(add_pubtype): Call is_namespace_die. Rework name calculation.  Call
	type_tag, lang_hooks.dwarf_name and add_enumerator_pubname.
	(output_pubnames): Output debug_pubnames_section_label or
	debug_pubtypes_section_label.
	(base_type_die): Call add_pubtype.
	(gen_namespace_die): Call add_pubname_string and lang_hooks.dwarf_name.
	(dwarf2_out_init): Generate debug_pubnames_section_label and
	debug_pubtypes_section_label.
	(pubtypes_section_empty): New function.
	(dwarf2_out_finish): Call add_AT_lineptr if pubnames or pubtypes is
	non-empty.  When dealing with pubnames, change assertion to conditional.
	Call pubtypes_section_empty.  Likewise when dealing with pubtypes.
	Move code checking for empty section to...
	(pubtypes_section_empty): Here.
	* target.def: Switch boolean to enable pubnames and pubtypes.

2011-12-17   Easwaran Raman  <eraman@google.com>

	* common.opt (fsized-delete): New option.

2011-12-16   Dmitriy Vyukov  <dvyukov@google.com>

	* tree-tsan.c (tsan_ignore): Add check for thunks.

2011-12-16  Dehao Chen  <dehao@google.com>

	* ipa-inline-transform.c (dump_inline_decision): New function.
	(cgraph_node_call_chain): New function.
	(cgraph_node_opt_info): New function.
	(cgraph_mark_inline_edge): Dump inline decisions to stderr.

2011-12-14  Sriraman Tallam  <tmsriram@google.com>

	Do not vectorize loops on Core2 that need to use unaligned
	vector load/stores.
	* tree-vect-stmts.c (is_vector_load_store_slow): New function.
	(vectorizable_load): Return false if the load
	is unaligned and slow.
	(vectorizable_store): Ditto.
	* target.def (TARGET_SLOW_UNALIGNED_VECTOR_MEMOP): New target hook.
	* doc/m.texi.in: Document new target hook:
	TARGET_SLOW_UNALIGNED_VECTOR_MEMOP
	* doc/m.texi: Regenerate.
	* config/i386/i386.c (ix86_slow_unaligned_vector_memop): New function.
	(TARGET_SLOW_UNALIGNED_VECTOR_MEMOP): New macro. 

2011-12-12  Teresa Johnson  <tejohnson@google.com>

	Limit unrolling of loops with LCP stalling instructions on Core i7
	so that they will fit into the LSD.
	* loop-unroll.c (decide_unroll_constant_iterations): Call loop
	unroll target hook.
	* config/i386/i386.c (ix86_loop_unroll_adjust): New function.
	(TARGET_LOOP_UNROLL_ADJUST): Define hook for x86.

2011-12-09   Dmitriy Vyukov  <dvyukov@google.com>

	Fix ThreadSanitizer pass required properties.
        * gcc/tree-tsan.c (pass_tsan): Replace PROP_trees with PROP_ssa.

2011-12-05   Dmitriy Vyukov  <dvyukov@google.com>

	Fix taking address of SSA_NAME in ThreadSanitizer pass.
        * gcc/tree-tsan.c (handle_expr): Add the additional check.

2011-11-30   Dmitriy Vyukov  <dvyukov@google.com>

	Add directives to run ThreadSanitizer tests
	only on i386/x86_64-*-linux targets.
	* gcc/testsuite/gcc.dg/tsan-ignore.c: Add the directives.
	* gcc/testsuite/gcc.dg/tsan-stack.c: Add the directives.
	* gcc/testsuite/gcc.dg/tsan-mop.c: Add the directives.

2011-11-23   Teresa Johnson  <tejohnson@google.com>

	* loop-unroll.c (loop_has_FP_comp): New function.
	(limit_code_size): New function.
	(unroll_and_peel_loops): Check if unrolling and/or peeling
	should be disabled due to large code size estimates.
	* common.opt (fripa-peel-size-limit): New option.
	(fripa-unroll-size-limit): New option.
	* tree-optimize.c (compute_codesize_estimate): New function.
	(execute_cleanup_cfg_post_optimizing): Invoke
	compute_codesize_estimate at the end of tree optimization.
	* params.def (codesize-hotness-threshold): New parameter.
	(unrollpeel-codesize-threshold): New parameter.
	* doc/invoke.texi: Document the new options and parameters.

2011-11-14   Dmitriy Vyukov  <dvyukov@google.com>

	Introduce a new option -ftsan which enables
	ThreadSanitizer (TSan), a data race detector:
	http://code.google.com/p/data-race-test/.
	* gcc/Makefile.in: Add tree-tsan.c.
	* gcc/common.opt: Add -ftsan, -ftsan-ignore flags.
	* gcc/doc/invoke.texi: Document the new flags.
	* gcc/passes.c: Add tsan pass.
	* gcc/tree-pass.h: Add tsan pass.
	* gcc/toplev.c (compile_file): Call tsan_finish_file.
	* gcc/tree-tsan.c: New file.
	* gcc/tree-tsan.h: New file.
	* gcc/testsuite/gcc.dg/tsan.h: New file.
	* gcc/testsuite/gcc.dg/tsan-mop.c: New file.
	* gcc/testsuite/gcc.dg/tsan-stack.c: New file.
	* gcc/testsuite/gcc.dg/tsan-ignore.c: New file.
	* gcc/testsuite/gcc.dg/tsan-ignore.h: New file.
	* gcc/testsuite/gcc.dg/tsan-ignore.ignore: New file.

2011-11-16   Rong Xu  <xur@google.com>

	* gcc/dwarf2out.c: use TYPE_CONTEXT to get the context for types.

2011-11-07   Rong Xu  <xur@google.com>

	* gcc/dwarf2out.c (dwarf2out_decl): fix mixed declarations and code.

2011-11-07   Sharad Singhai  <singhai@google.com>

       * gcc.c (cc1_options): Added -fno-early-inlining for coverage.

2011-11-04   Rong Xu  <xur@google.com>

	* gcc/c-family/c-opts.c: move the notes under fopt-info.

2011-11-04   Rong Xu  <xur@google.com>

	* gcc/dwarf2out.c (dwarf2out_decl): not emit type info
	for unreachable functions in LIPO mode.

2011-10-31   Teresa Johnson  <tejohnson@google.com>

	* common.opt (fopt-info): Disable -fopt-info by default.
	* loop-unroll.c (report_unroll_peel): New function.
	(unroll_and_peel_loops): Call record_loop_exits for later use.
	(peel_loops_completely): Print the loop source position in dump
	info and emit note under -fopt-info.
	(decide_unroll_and_peeling): Ditto.
	(decide_peel_once_rolling): Record peel factor for use in note
	emission.
	(decide_peel_completely): Ditto.
	* cfgloop.c (get_loop_location): New function.
	* cfgloop.h (get_loop_location): Ditto.
	* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Emit note
	under -fopt-info.

2011-11-02   Kostya Serebryany  <kcc@google.com>

	Introduce a new option -fasan which enables
	AddressSanitizer, a fast memory error detector:
        * gcc/Makefile.in: Add tree-asan.c.
	* gcc/common.opt: Add -fasan option.
	* gcc/invoke.texi: Document the new flag.
	* gcc/passes.c: Add the asan pass.
	* gcc/toplev.c (compile_file): Call asan_finish_file.
	* gcc/tree-asan.c: New file.
	* gcc/tree-asan.h: New file.
	* gcc/tree-pass.h: Declare pass_asan.

2011-10-19   Rong Xu  <xur@google.com>
	(1) Introduce a new option -fopt-info:
	 * fopt-info=0 or fno-opt-info: no message will be emitted.
	 * fopt-info or fopt-info=1: emit important warnings and optimization
	   messages with large performance impact.
	 * fopt-info=2: warnings and optimization messages targeting power users.
	 * fopt-info=3: informational messages for compiler developers.
	(2) Suppress verbose notes/warnings printed in FDO-use compilation.

        * gcc/common.opt (fopt-info): New flag. (fopt-info=) Ditto.
	* gcc/opts.c (common_handle_option): Handle OPT_fopt_info_.
	* gcc/flag-types.h (opt_info_verbosity_levels): New enum.
        * gcc/value-prof.c (check_ic_counter): guard warnings/notes by
          flag_opt_info.
          (find_func_by_funcdef_no): Ditto. 
          (check_ic_target): Ditto.
          (check_counter): Ditto.
          (check_ic_counter): Ditto.
        * gcc/mcf.c (find_minimum_cost_flow): Ditto.
        * gcc/profile.c (read_profile_edge_counts): Ditto.
          (compute_branch_probabilities): Ditto.
        * gcc/coverage.c (read_counts_file): Ditto.
          (get_coverage_counts): Ditto.
        * gcc/tree-profile.c: (gimple_gen_reusedist): Ditto.
          (maybe_issue_profile_use_note): Ditto.
          (optimize_reusedist): Ditto.
        * gcc/testsuite/gcc.dg/pr32773.c: add -fopt-info.
        * gcc/testsuite/gcc.dg/pr40209.c: Ditto.
        * gcc/testsuite/gcc.dg/pr26570.c: Ditto.
        * gcc/testsuite/g++.dg/tree-ssa/dom-invalid.C: Ditto.

2011-10-17  Dehao Chen  <dehao@google.com>

	Add a flag (-frecord-gcc-switches-in-elf) to record compiler
	command line options to .gnu.switches.text sections of
	the object file.
	* coverage.c (write_opts_to_asm): Write the options to
	.gnu.switches.text sections.
	* common.opt: Ditto.
	* opts.h: Ditto.

2011-10-04   Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 179485.

2011-09-22   Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 179052.

2011-09-20   Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 178863.

2011-09-15  Easwaran Raman  <eraman@google.com>

	* Makefile.in (PLUGIN_HEADERS): Add l-ipo.h.

2011-09-07  Sriraman Tallam  <tmsriram@google.com>

	* mversn-dispatch.c (specialize_call): Rebuild cgraph edges after
	specialization.
	(clone_and_dispatch_function): Rebuild cgraph edges to compute
	inline parameters.
	(do_convert_builtin_dispatch): Ditto.
	(convert_builtin_dispatch): Remove call to mark_syms_for_renaming
	for phi nodes.
	* passes.c (init_optimization_passes): Remove pass to rebuild
	cgraph edges after converting __builtin_dispatch.

2011-08-11  David Li  <davidxl@google.com>

	* l-ipo.c (process_module_scope_static_var): Handle aliases.
	(process_module_scope_static_func): New function.

2011-08-02   David Li  <davidxl@google.com>

	Port 53689-p2 and 53705-p2 to v15
	* libgcov.c (__gcov_merge_dc): Relax over assertion in
	dc merging.

2011-07-28  David Li  <davidxl@google.com>

	* coverage.c (coverage_init): Remove checking of profile-use
	flags.

2011-07-26  David Li  <davidxl@google.com>

	* value-prof.c (gimple_value_profile_transformations): Remove redundant code.
	* cgraphunit.c (cgraph_mark_functions_to_output): Fix assertion in lipo mode.
	* ipa-inline.c (early_inliner): Check fake edge.
	* l-ipo.c (pop_module_scope): Process alias node.
	(cgraph_unify_type_alias_sets): Skip empty function.

2011-07-25  Diego Novillo  <dnovillo@google.com>

	* tree-threadsafe-analyze.c (gate_threadsafe_analyze): Always
	return false.

2011-07-21   Rong Xu  <xur@google.com>

        * ipa.c (function_and_variable_visibility): In LIPO mode, call 
        varpool_externally_visible_p() to set the externally visible 
        attribute even for varpool nodes that not marked as needed.
        * l-ipo.c (varpool_do_link): Merge the externally visible 
        attribute for varpool nodes.

2011-07-21  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev. 176385.

2011-07-21  David Li  <davidxl@google.com>

	* cgraphunit.c (cgraph_mark_functions_to_output): Fix test for
        DECL_EXTERNAL.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* Makefile.in (COLLECT2_OBJS): Add vec.o and ggc-none.o.
	(GCOV_OBJS): Likewise.
	(GCOV_DUMP_OBJS): Likewise.
	(LTO_WRAPPER_OBJS): New.
	(lto-wrapper$(exeext)): Use.
	(mversn-dispatch.o): Add dependency on ipa-inline.h.
	(value-prof.o): Likewise.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* ipa-inline.c (ipa_inline): Remove extra fprintf argument.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* coverage.c (check_pmu_profile_options): Move ...
	* opts.c (check_pmu_profile_options): ... here.  Make static.
	* coverage.h (check_pmu_profile_options): Remove declaration.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* tree-inline.c (tree_can_inline_p): Remove unused function.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* c-decl.c (c_save_built_in_decl_post_parsing): Call
	cgraph_get_create_node instead of cgraph_node.
	* final.c (leaf_renumber_regs_insn): Likewise.
	(dump_cgraph_profiles): Likewise.
	(rest_of_handle_final): Likewise.
	* l-ipo.c (cgraph_lipo_get_resolved_node_1): Likewise.
	(cgraph_lipo_get_resolved_node): Likewise.
	(promote_static_var_func): Likewise.
	* mversn-dispatch.c (make_constructor_function): Likewise.
	(clone_function): Likewise.
	(specialize_call): Likewise.
	(clone_and_dispatch_function): Likewise.
	(do_convert_builtin_dispatch): Likewise.
	* tree-profile.c (gimple_gen_ic_profiler): Likewise.
	(gimple_gen_ic_func_profiler): Likewise.
	(gimple_gen_dc_profiler): Likewise.
	(gimple_gen_dc_func_profiler): Likewise.
	* value-prof.c (gimple_value_profile_transformations): Likewise.

2011-07-21   David Li  <davidxl@google.com>

	* ipa-inline.c (better_inline_comdat_function_p): Call inline_summary.
	(recursive_inlining): Add local PROBABILITY.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* Makefile.in (ipa-inline-transform.o): Add dependency on l-ipo.h.
	* ipa-inline-transform.c: Include l-ipo.h.

2011-07-21   Diego Novillo  <dnovillo@google.com>

        * coverage.c (get_da_file_name): Use base_file_name instead of
        filename.

2011-07-21   Diego Novillo  <dnovillo@google.com>

	* cgraphbuild.c (add_fake_indirect_call_edges): Call
	cgraph_get_create_node instead of cgraph_node.
	(rebuild_cgraph_edges): Likewise.

2011-07-21  David Li  <davidxl@google.com>

	* cgraphunit.c (cgraph_mark_functions_to_output): Fix test for
        DECL_EXTERNAL.

2011-07-20  Diego Novillo  <dnovillo@google.com>

	tree.h (enum operand_equal_flag): Add values
	OEP_ALLOW_NULL, OEP_ALLOW_NO_TYPE.

2011-06-30   DeLesley Hutchins  <delesley@google.com>

       * tree-threadsafe-analyze.c (handle_call_gs): Fixes case where
       the virtual method callee has unknown type.

2011-06-27   Doug Kwan  <dougkwan@google.com>

	Google ref 41164-p2
	Backport upstream patch under review.

	2011-01-19   NNick Clifton  <nickc@redhat.com>
       		     Matthias Klose <doko@debian.org>

		* configure.ac (gcc_cv_gold_srcdir): New cached variable -
		contains the location of the gold sources.
		(ORIGINAL_GOLD_FOR_TARGET): New substituted variable - contains
		the name of the locally built gold executable.
		* configure: Regenerate.
		* collect2.c (main): Detect the -use-gold and -use-ld switches
		and select the appropriate linker, if found.
		If a linker cannot be found and collect2 is executing in
		verbose mode then report the search paths examined.
		* exec-tool.in: Detect the -use-gold and -use-ld switches and
		select the appropriate linker, if found.
		Add support for -v switch.
		Report problems locating linker executable.
		* gcc.c (LINK_COMMAND_SPEC): Translate -fuse-ld=gold into
		-use-gold and -fuse-ld=bfd into -use-ld.
		* common.opt: Add fuse-ld=gold and fuse-ld=bfd.
		* opts.c (comman_handle_option): Ignore -fuse-ld=gold and
		-fuse-ld=bfd.
		* doc/invoke.texi: Document the new options.

2011-06-23   Sharad Singhai  <singhai@google.com>

	* gcc/doc/invoke.texi: Document new pmu profile related options.
	* gcc/doc/gcov.texi: Document new options -m and -q.
	* gcc/gcc.c: Link libgcov for -fpmu-profile-generate option.
	* gcc/gcov.c (filter_pmu_data_lines): New function.
	(output_pmu_data_header): Ditto.
	(output_pmu_data): Ditto.
	(output_load_latency_line): Ditto.
	(output_branch_mispredict_line): Ditto.
	(static void process_pmu_profile): Ditto.
	* gcc/gcov-io.c (gcov_canonical_filename): New function.
	(gcov_read_pmu_load_latency_info): Ditto.
	(gcov_read_pmu_branch_mispredict_info): Ditto.
	(gcov_read_pmu_tool_header): Ditto.
	(gcov_string_length): Ditto.
	(convert_unsigned_to_pct): Ditto.
	(print_load_latency_line): Ditto.
	(print_branch_mispredict_line): Ditto.
	(print_pmu_tool_header): Ditto.
	(destroy_pmu_tool_header): Ditto.
	(gcov_read_string): Make it unconditionally available.
	* gcc/gcov-io.h (struct gcov_pmu_info): New structure.
	* gcc/opts.c: New option -fpmu-profile-generate.
	* gcc/pmu-profile.c (enum pmu_tool_type): New structure.
	(enum pmu_event_type): Ditto.
	(enum pmu_state): Ditto.
	(enum cpu_vendor_signature): Ditto.
	(struct pmu_tool_info): Ditto.
	(get_x86cpu_vendor): New function.
	(parse_pmu_profile_options): Ditto.
	(start_addr2line_symbolizer): Ditto.
	(reset_symbolizer_parent_pipes): Ditto.
	(reset_symbolizer_child_pipes): Ditto.
	(end_addr2line_symbolizer): Ditto.
	(symbolize_addr2line): Ditto.
	(start_pfmon_module): Ditto.
	(convert_pct_to_unsigned): Ditto.
	(parse_load_latency_line): Ditto.
	(parse_branch_mispredict_line): Ditto.
	(destroy_load_latency_infos): Ditto.
	(destroy_branch_mispredict_infos): Ditto.
	(parse_pfmon_load_latency): Ditto.
	(parse_pfmon_tool_header): Ditto.
	(parse_pfmon_branch_mispredicts): Ditto.
	(pmu_start): Ditto.
	(init_pmu_load_latency): Ditto.
	(init_pmu_branch_mispredict): Ditto.
	(init_pmu_tool): Ditto.
	(__gcov_init_pmu_profiler): Ditto.
	(__gcov_start_pmu_profiler): Ditto.
	(__gcov_stop_pmu_profiler): Ditto.
	(gcov_write_ll_line): Ditto.
	(gcov_write_branch_mispredict_line): Ditto.
	(gcov_write_load_latency_infos): Ditto.
	(gcov_write_branch_mispredict_infos): Ditto.
	(gcov_tag_pmu_tool_header_length): Ditto.
	(gcov_write_tool_header): Ditto.
	(__gcov_end_pmu_profiler): Ditto.
	* gcc/coverage.c (get_const_string_type): New function.
	(create_coverage): Do the coverage processing even if only
	flag_pmu_profile_generate is specified.
	(coverage_init): Call gimple_init_instrumentation_sampling from here instead
	from tree-profile.c:gimple_init_edge_profiler.
	(profiling_enabled_p): New function.
	(init_pmu_profiling): Ditto.
	(check_pmu_profile_options): Ditto.
	* gcc/coverage.h (check_pmu_profile_options): Declaration.
	(tree_init_instrumentation_sampling): Declaration.
	* gcc/common.opt: Add new options -fpmu-profile-generate and
	-fpmu-profile-use.
	* gcc/tree-profile.c (gimple_init_instrumentation_sampling): Make
	extern. Move the call from gimple_init_edge_profiler to
	coverage.c:coverage_init.
	* gcc/libgcov.c (gcov_alloc_filename) [__GCOV_KERNEL__]: Moved earlier.
	(gcov_alloc_filename) [!__GCOV_KERNEL__]: Initialize gi_filename_up.
	(pmu_profile_stop): New function.
	(gcov_dump_module_info): Replace gcov_strip_leading_dirs with a macro.
	(__gcov_init): Add initialization of PMU profiler.
	(gcov_exit): Add finalization of PMU profiler.
	(gcov_get_filename): Cleanup whitespaces.
	* gcc/params.def: New parameter pmu_profile_n_addresses.
	* gcc/gcov-dump.c (tag_pmu_load_latency_info): New function.
	(tag_pmu_branch_mispredict_info): Ditto.
	(tag_pmu_tool_header): Ditto.

2011-06-22   Rong Xu  <xur@google.com>

	* gcc/libgcov.c: (TARGET_VTABLE_USES_DESCRIPTORS): Remove.

2011-06-21  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 175221.

2011-06-16   Sharad Singhai  <singhai@google.com>

	Google Ref 39999

	* doc/gcov.texi: Document gcov intermediate format.
	* gcov.c (get_gcov_file_intermediate_name): New function.
	(output_intermediate_file): New function.

2011-06-14  Le-Chun Wu  <lcwu@google.com>

	* tree-threadsafe-analyze.c (build_fully_qualified_lock): Handle
	IPA-SRA cloned methods.
	(get_canonical_lock_expr): Fold expressions that are INDIRECT_REF on
	top of ADDR_EXPR.
	(check_lock_required): Handle IPA-SRA cloned methods.
	(check_func_lock_excluded): Likewise.
	(process_function_attrs): Likewise.

2011-06-10  David Li  <davidxl@google.com>

	Backport 174930
	* cgraphunit.c (cgraph_finalize_compilation_unit): Pass dump.
	* passes.c (passr_eq): New function.
	(create_pass_tab): New function.
	(pass_traverse): New function.
	(dump_one_pass): New function.
	(dump_pass_list): New function.
	(dump_passes): New function.

2011-06-14   David Li  <davidxl@google.com>

	* cp/semantics.c (emit_associated_thunks):
	Do not omit thunk emission for aux modules.

2011-06-10  Rong Xu  <xur@google.com>

	* gcc/tree-ssa-loop-im.c (maxmimu_lsm): New define.
	(find_refs_for_sm): Limit excessive lsm.
	* gcc/gcse.c (cfgloop.h): New include.
	(maximum_lsm_limit): New define.
	(struct loop_lsm_limit_map): Ditto.
	(loop_lsm_limit_map_htab): Ditto.
	(loops_lsm): Ditto.
	(dominator_info_avail_before_lsm_limit): Ditto.
	(compute_ld_motion_mems): Limit execssive lsm.
	(find_loop_lsm_limit): New functions.
	(adjust_loop_lsm_limit): Ditto.
	(init_loop_lsm_limit): Ditto.
	(fini_loop_lsm_limit): Ditto.
	(estimate_reg_pressure_before_lsm): Ditto.
	(loop_lsm_limit_map_hash): Ditto.
	(loop_lsm_limit_map_eq): Ditto.
	(free_loop_lsm_limit_map): Ditto.

2011-06-09  Chris Demetriou  <cgd@google.com>

	* doc/install.texi (--with-warn-frame-larger-than-extra-text): New.
	* configure.ac (--with-warn-frame-larger-than-extra-text): New.
	(WARN_FRAME_LARGER_THAN_EXTRA_TEXT): Define.
	* final.c (final_start_function): Use
	WARN_FRAME_LARGER_THAN_EXTRA_TEXT.
	* configure: Regenerate.
	* config.in: Regenerate.

2011-06-09  David Li  <davidxl@google.com>

	Revert temporarily 
	* gcse.c (gate_rtl_cprop): Gate cleanup
	(execute_rtl_cprop): Gate cleanup

2011-06-09  David Li  <davidxl@google.com>

	Revert temporarily 
	Backport trunk 174849
	* cgraphunit.c (cgraph_finalize_compilation_unit): Pass dump.
	* passes.c (passr_eq): New function.
	(create_pass_tab): New function.
	(pass_traverse): New function.
	(dump_one_pass): New function.
	(dump_pass_list): New function.
	(dump_passes): New function.

2011-06-09  David Li  <davidxl@google.com>

	* gcse.c (gate_rtl_cprop): Gate cleanup
	(execute_rtl_cprop): Gate cleanup

2011-06-09  David Li  <davidxl@google.com>

	Backport trunk 174849
	* cgraphunit.c (cgraph_finalize_compilation_unit): Pass dump.
	* passes.c (passr_eq): New function.
	(create_pass_tab): New function.
	(pass_traverse): New function.
	(dump_one_pass): New function.
	(dump_pass_list): New function.
	(dump_passes): New function.

2011-06-09  David Li  <davidxl@google.com>

	Backport trunk 174848
	* tree-complex.c (tree_lower_complex): Gate cleanup.
	* tree-stdarg.c (check_all_va_list_escapes): Ditto.
	(execute_optimize_stdarg): Ditto.
	* tree-eh.c (execute_lower_eh_dispatch): Ditto.
	(execute_cleanup_eh_1): Ditto.
	(execute_cleanup_eh): Ditto.
	* gcse.c (gate_rtl_pre): Ditto.
	(execute_rtl_pre): Ditto.
	* except.c (finish_eh_generation): Ditto.
	(convert_to_eh_region_ranges): Ditto.
	* cprop.c (one_cprop_pass): Ditto.

2011-06-08  Sriraman Tallam  <tmsriram@google.com>

	* doc/invoke.texi: document option -fcallgraph-profiles-sections.
	* final.c  (dump_cgraph_profiles): New function.
	(rest_of_handle_final): Create new section '.note.callgraph.text'
	with compiler flag -fcallgraph-profiles-sections
	* common.opt: New option -fcallgraph-profiles-sections.
	* params.def (DEFPARAM): New param
        PARAM_NOTE_CGRAPH_SECTION_EDGE_THRESHOLD.

2011-06-07  Mark Heffernan  <meheff@google.com>

	* cgraph.h (cgraph_global_info): Remove field.
	* ipa-inline.c (cgraph_clone_inlined_nodes): Change
	stack frame computation.
	(cgraph_check_inline_limits): Change stack frame computation.
	(compute_inline_parameters): Remove dead initialization.

2011-06-07  David Li  <davidxl@google.com>

	* tree-pretty-print.c	(revision 174779)
	(dump_function_header): dump module id.

2011-06-07  David Li  <davidxl@google.com>

	Backport trunk r174536,174537,174762,174698

	* passes.c (enable_disable_pass): Handle assembler name.
	(is_pass_explicitly_enabled_or_disabled): Ditto.
	* predict.c : Change pass name
	* ipa.c: Ditto.
	* dce.c: Ditto.
	* tree-profile.c: Ditto.
	* except.c: Ditto.
	* tree-pretty-print.c (dump_function_header): New function.
	* final.c (rest_of_clean_state): Use header dumper.
	* tree-cfg.c (gimple_dump_cfg): Use header dumper.
	* passes.c (pass_init_dump_file): Use header dumper.
	* tree-pretty-print.c (dump_function_header): Add flags.
	Don't dump decl_uid with nouid.
	* tree-pretty-print.h (dump_function_header): Adjust.
	* final.c (rest_of_clean_state): Pass dump_flags on, with nouid.
	* passes.c (pass_init_dump_file): Pass dump_flags on.
	* tree-cfg.c (gimple_dump_cfg): Pass flags on.

2011-06-06  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 174705.

2011-06-02  Neil Vachharajani  <nvachhar@gmail.com>
	    Dehao Chen <danielcdh@gmail.com>

	* gcc/doc/invoke.texi (min-mcf-cancel-iters): Document.
	* gcc/mcf.c (MAX_ITER): Use new param PARAM_MIN_MCF_CANCEL_ITERS.
	(edge_type): Add SINK_SOURCE_EDGE.
	(dump_fixup_edge): Handle SINK_SOURCE_EDGE.
	(create_fixup_graph): Make problem miminum cost circulation.
	(cancel_negative_cycle): Update handling of infinite capacity.
	(compute_residual_flow): Update handling of infinite capacity.
	(find_max_flow): Update handling of infinite capacity.
	(modify_sink_source_capacity): New function.
	(find_minimum_cost_flow): Make problem miminum cost circulation.
	Use param PARAM_MIN_MCF_CANCEL_ITERS.
	* gcc/params.def (PARAM_MIN_MCF_CANCEL_ITERS): Define.

2011-05-30  Xinliang David Li  <davidxl@google.com>

	Backport trunk r174423, r174424
	* opts-global.c (handle_common_deferred_options): Handle new options.
	* passes.c (register_one_dump_file): Call register_pass_name.
	(execute_one_pass): Check explicit enable/disable flag.
	(passr_hash): New function.
	(passr_eq): Ditto.
	(register_pass_name): Ditto.
	(get_pass_by_name): Ditto.
	(pass_hash): Ditto.
	(pass_eq): Ditto.
	(enable_pass): Ditto.
	(disable_pass): Ditto.
	(is_pass_explicitly_enabled_or_disabled): Ditto.

2011-05-30  David Li  <davidxl@google.com>

	* cgraphunit.c (cgraph_optimize):  Remove call to static
	promotion funciton.
	* cp/decl2.c (cp_process_pending_declarations):  Do not
	remove body of __static_init functions for aux modules.
	* ipa-inline.c (leaf_node_p):  Filter indirect callsite
	to make sure profile gen and profile use consistency
	(cgraph_decide_inlining_incrementally):  Remove LIPO
	specific inline rule used to workaround size estimation
	problem for static functions.
	* tree-profile.c (tree_profiling):  Do static promotion here.
	* l-ipo.c (cgraph_is_aux_decl_external):  Handle non-promoted
	static function.
	(create_unique_name): New function.
	(promote_static_var_func): Do not promote non addr taken statics.

2011-05-23  Rong Xu  <xur@google.com>

        * gcc/libgcov.c (gcov_merge_gcda_file): initialize eof_pos for
	every invocation.

2011-05-21  David Li  <davidxl@google.com>

	* function.h: Give funcdef_no 18 bits in label name.

2011-05-18  Mark Heffernan  <meheff@google.com>

       * opts.c (finish_options): Increase inlining limits with profile
       generate and use.

2011-05-17  Mark Heffernan  <meheff@google.com>

	* ipa-inline.c (estimate_function_body_sizes): Parameterize static
	function static overhead.
	* params.def (PARAM_INLINE_FUNCTION_OVERHEAD_SIZE): New parameter.

2011-05-12  Rong Xu  <xur@google.com>

	* gcc/coverage.c (coverage_note_define): set is_kernel_build if building
	for Linux kernel.
	* gcc/tree-profile.c (is_kernel_build): New declare.
	(init_ic_make_global_vars): don't emit TLS declarations for Linux kernel
	builds.
	(direct_call_profiling): Ditto.
	* gcc/gcov-io.h	(__GCOV_KERNEL__): Set if __KERNEL__ is defined.
	(BTIS_PER_UNIT): Set the vaule under __GCOV_KERNEL__.
	(LONG_LONG_TYPE_SIZE): Ditto.
	(_GCOV_FILE, _GCOV_fclose, _GCOV_ftell, _GCOV_fseek, _GCOV_ftruncate,
	_GCOV_fread, _GCOV_fwrite, _GCOV_fread, _GCOV_fileno): Wrapper macros.
	(gcov_kernel_vfile): New type declare under __GCOV_KERNEL__.
	(gcc_assert): New function under __GCOV_KERNEL__.
	(gcov_var): Move the definition to gcov-io.c under __GCOV_KERNEL__.
	(gcov_rewrite): Change fseek to _GCOV_fseek.
	* gcc/gcov-io.c (gcov_var): Add declare under __GCOV_KERNEL__.
	(gcov_open): New implementation under __GCOV_KERNEL__.
	(gcov_sync): Ditto.
	(gcov_truncate): Ditto.
	(gcov_close): Replace calls to libc functions to macros.
	(gcov_write_block): Ditto.
	(gcov_read_words): Ditto.
	(gcov_sync): Ditto.
	(gcov_seek): Ditto.
	(kernel_file_fclose): New functions under __GCOV_KERNEL__.
	(kernel_file_ftell): Ditto.
	(kernel_file_fseek): Ditto.
	(kernel_file_ftruncate): Ditto.
	(kernel_file_fread): Ditto.
	(kernel_file_fwrite): Ditto.
	(kernel_file_fileno): Ditto.
	* gcc/libgcov.c	(L_gcov, L_gcov_interval_profiler, 
	L_gcov_pow2_profiler, L_gcov_one_value_profiler,
	L_gcov_indirect_call_profiler, L_gcov_average_profiler,
	L_gcov_ior_profiler, TARGET_VTABLE_USES_DESCRIPTORS,
	HAVE_CC_TLS, __GCOV_KERNEL__, IN_LIBGCOV, IN_GCOV): Set the value
	under __KERNEL__ for Linux kernel FDO build support.
	(tconfig.h, tsystem.h, coretypes.h, tm.h): Do not inlude for kernel 
	builds (i.e. include under #ifndef __KERNELL__).
	(string.h, fcntl.h, errno,h, sys/stat.h) Ditto.
	(gcov_error): New function for error reporting.
	(all, this_program, this_object, program, object, summary_pos,
	eof_pos, gcov_prefix_strip, prefix_length
	gi_filename, gi_filename_up): New declares.
	(gcov_exit): Refactored.
	(gcov_open_by_filename): New function.
	(gcov_counter_active): Ditto.
	(gcov_alloc_filename): Ditto.
	(gcov_dump_module_info): Ditto.
	(gcov_counter_array): Ditto.
	(gcov_object_summary): Ditto.
	(gcov_merge_gcda_file): Ditto.
	(gcov_compute_fi_stride): Ditto.
	(gcov_gcda_file_size): Ditto.
	(gcov_write_gcda_file): Ditto.
	(gcov_exit_init): Ditto.
	(gcov_dump_one_gcov): Ditto.
	(gcov_get_filename): New implementation under __GCOV_KERNEL__.
	(gcov_sort_icall_topn_counter): Ditto.
	(gcov_alloc_filename): Ditto.
	(gcov_current_file): Ditto.
	(gcov_set_vfile): Ditto.
	(gcov_kernel_dump_one_gcov): Ditto.
	(__gcov_merge_add): New dummy functions under __GCOV_KERNEL__.
	(__gcov_merge_single): Ditto.
	(__gcov_merge_delta): Ditto.
	(__gcov_merge_ior): Ditto.
	(__gcov_merge_icall_topn): Ditto.
	(__gcov_merge_dc): Ditto.
	(__gcov_merge_reusedist): Ditto.
	(__gcov_merge_add): Export kernel symbol under __GCOV_KERNEL__.
	(__gcov_merge_single): Ditto.
	(__gcov_merge_delta): Ditto.
	(__gcov_merge_ior): Ditto.
	(__gcov_merge_icall_topn): Ditto.
	(__gcov_merge_dc): Ditto.
	(__gcov_merge_reusedist): Ditto.
	(__gcov_average_profiler): Ditto.
	(__gcov_indirect_call_profiler): Ditto.
	(__gcov_interval_profiler): Ditto.
	(__gcov_ior_profiler): Ditto.
	(__gcov_one_value_profiler): Ditto.
	(__gcov_pow2_profiler): Ditto.

2011-05-10  David Li  <davidxl@google.com>

	* cgraphunit.c (verify_cgraph_node): Disable checking
	in LIPO mode temporarily.
	(cgraph_mark_functions_to_output): Ditto.
	* tree-cfg.c (verify_stmt): Ditto.

2011-05-06  David Li  <davidxl@google.com>

	Revert r173158.
	* doc/invoke.texi (fno-strict-enum-precision): Document.
	* gimplify.c (gimplify_switch_expr): If
	-fno-strict-enum-precision is given, do not consider enum
	types.
	* tree-vrp.c (stmt_interesting_for_vrp): If
	-fno-strict-enum-precision is given, do not look at enum
	types.

2011-05-09  Silvius Rus <silvius.rus@gmail.com>

	* value-prof.c (interesting_stringop_to_profile_p): Disbale
	stringop profiling if reuse distance profiling is turned on.
	* value-prof.h (gimple_gen_reusedist, optimize_reusedist): Declare.
	* gcov-io.h: (GCOV_COUNTER_REUSE_DIST): New counter.
	(GCOV_COUNTERS): Update.
	(GCOV_COUNTER_NAMES): Add reuse_distance.
	(GCOV_MERGE_FUNCTIONS): Add __gcov_merge_reusedist.
	(__gcov_merge_reusedist): New declaration.
	* profile.c (branch_prob): Enable reuse distance profiling and
	optimization.
	* common.opt (fprofile-reusedist, foptimize-locality): New options.
	* tree-profile.c: Include params.h.
	(stringop_subst, reusedist_t): New structures.
	(stringop_subst_t, reusedist_t): New typedefs.
	(stringop_decl): New global array.
	(RD_NUM_COUNTERS): New constant.
	(get_stringop_subst, reusedist_is_interesting_call)
	(reusedist_instr_func_name, reusedist_get_instr_decl)
	(reusedist_make_instr_call, reusedist_from_counters)
	(gimple_gen_reusedist, nt_op_name, reusedist_get_size_threshold)
	(reusedist_get_distance_large_threshold)
	(reusedist_get_distance_small_threshold)
	(reusedist_get_count_threshold, reusedist_nt_is_worth_it)
	(reusedist_get_nt_decl, maybe_issue_profile_use_note)
	(reusedist_maybe_replace_with_nt_version, optimize_reusedist): New
	functions.
	(gate_tree_profile_ipa): Return true if reuse distance instrumentation
	or use is turned on.
	* Makefile.in (LIBGCOV): Add _gcov_merge_reusedist.
	* libgcov.c (__gcov_weighted_mean2, __gcov_merge_reusedist): New
	functions.
	* params.def (PARAM_REUSEDIST_MEAN_DIST_LARGE_THRESH)
	(PARAM_REUSEDIST_MEAN_DIST_SMALL_THRESH)
	(PARAM_REUSEDIST_CALL_COUNT_THRESH, PARAM_REUSEDIST_MEMCPY_SIZE_THRESH)
	(PARAM_REUSEDIST_MEMSET_SIZE_THRESH): New params.

2011-05-06  Lawrence Crowl  <crowl@google.com>

	* timevar.h (timevar_cond_start): Remove unused POP_TIMEVAR_AND_RETURN.
	(timevar_cond_start): New for starting a timer only when it is not
	already running.
	(timevar_cond_stop): New for stopping a timer when it was not already
	running.

	* timevar.c (timevar_stop): Enable start/stop timers to start again.
	(timevar_cond_start): New as above.
	(timevar_cond_stop): New as above.

	* timevar.def: Add start/stop timers for compiler phases,
	TV_PHASE_SETUP, TV_PHASE_PARSING, TV_PHASE_DEFERRED, TV_PHASE_CGRAPH,
	TV_PHASE_DBGINFO (C), TV_PHASE_CHECK_DBGINFO (C++), TV_PHASE_GENERATE,
	and TV_PHASE_FINALIZE.
	Change push/pop timer TV_PARSE to TV_PARSE_GLOBAL.
	Add push/pop timers TV_PARSE_STRUCT, TV_PARSE_ENUM, TV_PARSE_FUNC,
	TV_PARSE_INLINE, TV_PARSE_INMETH, TV_TEMPLATE_INST.
	Change push/pop timer TV_NAME_LOOKUP into a start/stop timer.
	Make unused TV_OVERLOAD into a start/stop timer.

	Remove unused timers TV_OVERLOAD, TV_TEMPLATE_INSTANTIATION.
	Mark the strings for TV_NAME_LOOKUP and TV_OVERLOAD with a "|"
	to indicate that they are start/stop timers.

	* toplev.c (compile_file): Change TV_PARSE to TV_PARSE_GLOBAL.
	Add start/stop timers TV_PHASE_PARSING and TV_PHASE_GENERATE.
	Move initialization to do_compile.
	(do_compile): Add initialization from above.
	Add start/stop timers TV_PHASE_SETUP and TV_PHASE_FINALIZE.

	* c-decl.c (c_write_global_declarations): Add start/stop of
	TV_PHASE_DEFERRED, TV_PHASE_CGRAPH, TV_PHASE_DBGINFO.

	* c-parser.c (c_parser_declaration_or_fndef): Push/pop TV_PARSE_FUNC
	or TV_PARSE_INLINE, as appropriate.
	(c_parser_enum_specifier): Push/pop TV_PARSE_ENUM.
	(c_parser_struct_or_union_specifier): Push/pop TV_PARSE_STRUCT.

2011-05-06  Easwaran Raman  <eraman@google.com>

	Backport r172837:

	* cfgexpand.c (stack_var): Remove OFFSET...
	(add_stack_var): ...and its reference here...
	(expand_stack_vars): ...and here.
	(stack_var_cmp): Sort by descending order of size.
	(partition_stack_vars): Change heuristic.
	(union_stack_vars): Fix to reflect changes in
	partition_stack_vars.
	(dump_stack_var_partition): Add newline after each partition.
	
2011-05-06  Easwaran Raman  <eraman@google.com>

	Backport r172788:

	* cfgexpand.c (add_alias_set_conflicts): Add conflicts with a variable
	containing union type only with -fstrict-aliasing.

2011-05-04  David Li  <davidxl@google.com>

	* coverage.c (incompatible_cl_args): Better handling
	of option mismatch.


2011-05-04  Sriraman Tallam  <tmsriram@google.com>

	* tree-pass.h (pass_tree_convert_builtin_dispatch): New pass.
	(pass_ipa_multiversion_dispatch): New pass.
	* builtin-types.def (BT_PTR_FN_INT): New pointer type.
	(BT_FN_INT_PTR_FN_INT_PTR_PTR_VAR): New function type for __builtin_dispatch.
	* builtins.def (BUILT_IN_DISPATCH): New builtin to
	support multi-version calls.
	* mversn-dispatch.c: New file.
	* timevar.def (TV_MVERSN_DISPATCH): New time var.
	* common.opt (fclone-hot-version-paths): New flag.
	* Makefile.in (mversn-dispatch.o): New rule.
	* passes.c (init_optimization_passes): Add the new
	multi-version and dispatch passes to the pass list.
	* params.def (PARAM_NUMBER_OF_MVERSN_CLONES): Define.
	(PARAM_MVERSN_CLONE_CGRAPH_DEPTH): Define.
	* doc/invoke.texi (mversn-clone-depth): Document.
	(num-mversn-clones): Document.
	(fclone-hot-version-paths): Document.

2011-05-04  Silvius Rus  <silvius.rus@gmail.com>

	* doc/invoke.texi: Document -fprofile-generate-sampling option.
	* gcov-io.h (__gcov_set_sampling_rate): New declaration.
	* profile.c (branch_prob): Add support for sampled profile
	collection.
	* profile.h (add_sampling_to_edge_counters): New declaration.
	* common.opt (fprofile-generate-sampling): New option.
	* tree-profile: Include header files; define EDGE_COUNTER_STMT_COUNT.
	(instrumentation_to_be_sampled, gcov_sample_counter_decl)
	(gcov_sampling_rate_decl): New globals.
	(insert_if_then, add_sampling_wrapper, is_instrumentation_to_be_sampled)
	(add_sampling_to_edge_counters, gimple_init_instrumentation_sampling):
	New functions.
	(gimple_init_edge_profiler): Call gimple_init_instrumentation_sampling.
	(gimple_gen_edge_profiler): Mark start of instrumentation block.
	* libgcov.c (__gcov_sampling_rate): New extern declaration.
	(gcov_sampling_rate_initialized, __gcov_sample_counter): New globals.
	(gcov_exit): Set sampling rate; minor coding style fixes.
	(__gcov_init): Initialize __gcov_sampling_rate.
	* params.def (PARAM_PROFILE_GENERATE_SAMPLING_RATE): New parameter.

2011-05-03  David Li  <davidxl@google.com>

	Backport r173177:

	* tree-profile.c (init_ic_make_global_vars): Set
	tls attribute on ic vars.
	* coverage.c (coverage_end_function): Initialize
	function_list with zero.

2011-05-03  David Li  <davidxl@google.com>

	Backport r173147:

	* tree.c (crc32_string): Use crc32_byte.
	(crc32_byte): New function.
	* tree.h (crc32_byte): New function.
	* gcov.c (read_graph_file): Handle new cfg_cksum.
	(read_count_file): Ditto.
	* profile.c (instrument_values): Ditto.
	(get_exec_counts): Ditto.
	(read_profile_edge_counts): Ditto.
	(compute_branch_probabilities): Ditto.
	(compute_value_histograms): Ditto.
	(branch_prob): Ditto.
	(end_branch_prob): Ditto.
	* coverage.c (read_counts_file): Ditto.
	(get_coverage_counts): Ditto.
	(tree_coverage_counter_addr): Ditto.
	(coverage_checksum_string): Ditto.
	(coverage_begin_output): Ditto.
	(coverage_end_function): Ditto.
	(build_fn_info_type): Ditto.
	(build_fn_info_value): Ditto.
	* libgcov.c (gcov_exit): Ditto.
	* gcov-dump.c (tag_function): Ditto.
	(compute_checksum): Remove.

2011-05-03  David Li  <davidxl@google.com>

	* l-ipo.c (promote_static_var_or_func): Keep initializer
	for externalized aux module variables.
	(process_module_scope_static_var): Keep initializer
	for promoted static vars to allow ccp.

2011-05-02  Sriraman Tallam  <tmsriram@google.com>

	Revert :

	2011-05-02  Sriraman Tallam  <tmsriram@google.com>

	* c-family/c-common.c	(revision 173122) (handle_version_selector_attribute): New function.
	(c_common_attribute_table): New attribute "version_selector".
	* tree-pass.h	(revision 173122) (pass_tree_convert_builtin_dispatch): New pass.
	(pass_ipa_multiversion_dispatch): New pass.
	* testsuite/gcc.dg/mversn7.c	(revision 0): New test case.
	* testsuite/gcc.dg/mversn4.c	(revision 0): New test case.
	* testsuite/gcc.dg/mversn4.h	(revision 0): New test case.
	* testsuite/gcc.dg/mversn4a.c	(revision 0): New test case.
	* testsuite/gcc.dg/torture/mversn1.c	(revision 0): New test case.
	* testsuite/gcc.dg/mversn2.c	(revision 0): New test case.
	* testsuite/gcc.dg/mversn6.c	(revision 0): New test case.
	* testsuite/gcc.dg/mversn3.c	(revision 0): New test case.
	* testsuite/g++.dg/mversn8.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn10a.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn14a.C	(revision 0): New test case.
	* testsuite/g++.dg/tree-prof/mversn13.C	(revision 0): New test case.
	* testsuite/g++.dg/tree-prof/mversn15.C	(revision 0): New test case.
	* testsuite/g++.dg/tree-prof/mversn15a.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn9.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn10.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn12.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn14.C	(revision 0): New test case.
	* testsuite/g++.dg/mversn16.C	(revision 0): New test case.
	* testsuite/g++.dg/torture/mversn11.C	(revision 0): New test case.
	* testsuite/g++.dg/torture/mversn5.C	(revision 0): New test case.
	* testsuite/g++.dg/torture/mversn5.h	(revision 0): New test case.
	* testsuite/g++.dg/torture/mversn5a.C	(revision 0): New test case.
	* builtin-types.def	(revision 173122) (BT_PTR_FN_INT): New pointer type.
	(BT_FN_INT_PTR_FN_INT_PTR_PTR_VAR): New function type for __builtin_dispatch.
	* builtins.def	(revision 173122) (BUILT_IN_DISPATCH): New builtin to
	support multi-version calls.
	* mversn-dispatch.c	(revision 0): New file.
	* timevar.def	(revision 173122) (TV_MVERSN_DISPATCH): New time var.
	* common.opt	(revision 173122) (fclone-hot-version-paths): New flag.
	* Makefile.in	(revision 173122) (mversn-dispatch.o): New rule.
	* passes.c	(revision 173122) (init_optimization_passes): Add the new
	multi-version and dispatch passes to the pass list.
	* params.def	(revision 173122) (PARAM_NUMBER_OF_MVERSN_CLONES): Define.
	(PARAM_MVERSN_CLONE_CGRAPH_DEPTH): Define.
	* doc/invoke.texi	(revision 173122) (mversn-clone-depth): Document.
	(num-mversn-clones): Document.
	(fclone-hot-version-paths): Document.

2011-05-02  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 173255.

2011-05-02  Chris Demetriou  <cgd@google.com>

	* config/i386/i386.c (get_pc_thunk_name): Make 32-bit
	thunk prefix be __x86.get_pc_thunk.

2011-05-01  David Li  <davidxl@google.com>

	* l-ipo.c (clear_module_scope_bindings): Clear name binding for
	assembler name.
	(pop_module_scope): Clear name bindings for the last module.
	(lipo_cmp_type): Handle template arg type.

2011-04-30  Guozhi Wei  <carrot@google.com>

	PR target/43129
	* hooks.c (hook_rtx_void_null): New function.
	* hooks.h (hook_rtx_void_null): New prototype.
	* target.def (got_access): New hook vector declaration.
	* tree-pass.h (pass_simplify_got): New pass.
	* timevar.def (TV_SIMPLIFY_GOT): New TV id.
	* simplify-got.c: New source file.
	* Makefile.in (simplify-got.o): Add a new file.
	* passes.c (init_optimization_passes): Add a new pass.
	* config/arm/arm.c (arm_output_addr_const_extra): Output GOT_PREL
	relocation.
	(arm_get_pic_reg): New function.
	(arm_clear_pic_reg): New function.
	(arm_can_simplify_got_access): New function.
	(arm_loaded_global_var): New function.
	(arm_load_global_address): New function.
	* config/arm/arm.md (UNSPEC_GOT_PREL_SYM): New UNSPEC symbol.

2011-04-29  Cary Coutant  <ccoutant@google.com>

	* common.opt (generate_debug_line_table): New global var.
	(gmlt): New option
	* dwarf2out.c (GENERATE_MINIMUM_LINE_TABLE): New macro.
	(add_pubname_string): Test for -gmlt.
	(add_pubname): Likewise.
	(add_src_coords_attributes): Likewise.
	(decls_for_scope): Likewise.
	(dwarf2out_source_line): Likewise.
	(dwarf2out_finish): Likewise.
	* opts.c (finish_options): Force debug info to at least level 1
	if -gmlt specified.
	(common_handle_option): Add OPT_gmlt.
	(set_debug_level): Set generate_debug_line_table flag.
	* tree-ssa-live.c (remove_unused_scope_block_p): Test for -gmlt.

	* doc/invoke.texi (-gmlt): New options

2011-04-29  Cary Coutant  <ccoutant@google.com>

	* basic-block.h (struct basic_block_def): Remove discriminator field.
	* cfghooks.c (split_block): Remove discriminator field.
	* cfglayout.c (insn_discriminator): New function.
	* final.c (discriminator): Remove.
	(override_discriminator): New file-scope variable.
	(final_start_function): Remove tracking of discriminator by basic
	block.
	(final_scan_insn): Track discriminator by instruction.
	(notice_source_line): Check for discriminator override. Get
	discriminator from instruction.
	* gimple-pretty-print.c (dump_gimple_stmt): Print discriminator.
	(dump_bb_header): Don't print discriminator.
	* input.c: Include vecprim.h.
	(discriminator_location_locations): New variable.
	(discriminator_location_discriminators): New variable.
	(min_discriminator_location): New variable.
	(expand_location): Use map_discriminator_location.
	(location_with_discriminator): New function.
	(has_discriminator): New function.
	(map_discriminator_location): New function.
	(get_discriminator_from_locus): New function.
	* input.h (location_with_discriminator): New function.
	(has_discriminator): New function.
	(map_discriminator_location): New function.
	(get_discriminator_from_locus): New function.
	* print-rtl.c (print_rtx): Print discriminator.
	* rtl.h (insn_discriminator): New function.
	* tree-cfg.c: Include input.h.
	(assign_discriminator): Assign discriminators to instructions rather
	than to the basic block.
	* tree-pretty-print.c (dump_location): Print discriminator.

2011-04-28  Sharad Singhai  <singhai@google.com>

	* params.def: Add new parameters to control peeling.
	* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Use
	different peeling parameters when profile feedback is available.
	* loop-unroll.c (decide_peel_once_rolling): Ditto.
	(decide_peel_completely): Ditto.
	* doc/invoke.texi: Document new peeling parameters.

2011-04-28  Sharad Singhai  <singhai@google.com>

	Google Ref 40087

	* opts.c (common_handle_option): Disable -ftracer for profile use.
	* doc/invoke.texi: Update doc that -ftracer is no longer
	enabled for FDO.

2011-04-28  Xinliang David Li  <davidxl@google.com>

	* final.c (profile_function): Use FUNC_LABEL_ID.
	* dwarf2out.c (dwarf2out_vms_end_prologue): Ditto.
	(dwarf2out_vms_begin_epilogue): Ditto.
	(dwarf2out_vms_debug_main_pointer): Ditto.
	* cgraphunit.c (cgraph_finalize_compilation_unit):
	Remove eq type alias set computation.
	* tree-profile.c (gimple_gen_ic_func_topn_profiler): Do not skip any functions.
	(tree_profiling): Add type alias merging.
	* l-ipo.c (restore_post_parsing_states): Use max funcdef_no.
	(pop_module_scope): Use max funcdef_no.
	* gcov-dump.c (tag_function): Fix a bug in function read.

2011-04-27  Xinliang David Li  <davidxl@google.com>

	* value-prof.c (init_node_map): Disable for lipo mode.
	(del_node_map): Disable for lipo mode.

2011-04-27  Le-Chun Wu  <lcwu@google.com>

	Google ref 42718.

	* doc/extend.texi (Wnonnull): Add documentation for C++.
	* doc/invoke.texi (Wnonnull): Add documentation for C++.

2011-04-27  Le-Chun Wu  <lcwu@google.com>

	* opts.c (common_handle_option): Do not enable Wshadow-local
	nor Wshadow-compatible-local if Wshadow is disabled.

2011-04-27  Le-Chun Wu  <lcwu@google.com>

	Google ref 39127.

	* c-decl.c (warn_if_shadowing): Use the warning code corresponding
	to the given -Wshadow- variant.
	* common.opt (Wshadow-local): New option.
	(Wshadow-compatible-local): New option.
	* invoke.texi: Document Wshadow-local and Wshadow-compatible-local.
	* opts.c (common_handle_option): Handle OPT_Wshadow and
	OPT_Wshadow_local.

2011-04-27  Silvius Rus  <silvius.rus@gmail.com>

	Google ref 39984.

	* doc/invoke.texi (fno-strict-enum-precision): Document.
	* gimplify.c (gimplify_switch_expr): If
	-fno-strict-enum-precision is given, do not consider enum
	types.
	* tree-vrp.c (stmt_interesting_for_vrp): If
	-fno-strict-enum-precision is given, do not look at enum
	types.

2011-04-26  Xinliang David Li  <davidxl@google.com>

	* tree-ssa-uninit.c (warn_uninitialized_phi): Pass
	 warning code.
	* opts.c (common_handle_option): Ditto.
	* common.opt:  New option.
	* tree-ssa.c (warn_uninit): Add one more parameter.
	(warn_uninitialized_var): Pass warning code.
	* tree-flow.h: Interface change.

2011-04-26  Xinliang David Li  <davidxl@google.com>

	* toplev.c (process_options): Enable -Werror=coverage-mismatch
	by default when -Wno-error is not specified.
	* opts-global.c (decode_options): Remove call to
	control_warning_options.

2011-04-26  Xinliang David Li  <davidxl@google.com>

	* cgraph.h: Remove pid.
	* cgraph.c: Remove pid.
	* value-prof.c (init_node_map): New function.
	(del_node_map): New function.
	(find_func_by_funcdef_no): New function.
	(gimple_ic_transform): Call new function.
	* cgraphunit.c (cgraph_finalize_function): Remove pid.
	* function.c (get_last_funcdef_no): New function.
	* function.h (get_last_funcdef_no): New function.
	* tree-profile.c (gimple_gen_ic_func_profiler): Pass funcdef_no
	to libgcov function.
	(tree-profiling): Call node map init and delete function.

2011-04-26  Le-Chun Wu  <lcwu@google.com>

	* common.opt: New option.
	* doc/invoke.texi: Documentation for new options.
	* fold-const.c (operand_equal_p): Allow operands without typres to
	compare.
	(fold_unary_loc_1): Renamed from fold_unary_loc.
	(fold_unary_loc): New wrapper function.
	(fold_binary_loc_1): Renamed from fold_binary_loc.
	(fold_binary_loc): New wrapper function.
	(fold_ternary_loc_1): Renamed from fold_ternary_loc.
	(fold_ternary_loc): New wrapper function.
	* tree.h (struct tree_base): New flag for folded expr.
	(enum operand_equal_flag): New flags.

2011-04-25  David Li  <davidxl@google.com>

	* cgraphbuild.c (rebuild_cgraph_edges): Create edges based
	using resolved nodes in LIPO mode after ipa_tree_profiling.
	* dyn-ipa.c:  New file.
	* dbgcnt.def: New debug counters.
	* cgraph.c (cgraph_mark_reachable_node): Handle aux module nodes.
	(cgraph_clone_node): New field initialization.
	(cgraph_create_virtual_clone): New field initialization.
	* value-prof.c (dump_histogram_value): New hist kind.
	(check_counter): New function.
	(gimple_value_profile_transformations): New ic kind.
	(gimple_ic_transform): Changed interface.
	(gimple_indirect_call_to_profile): New vpt kind.
	(gimple_find_values_to_profile): New vpt kind.
	* cgraphunit.c (cgraph_finalize_function): Handle LIPO mode.
	(verify_edge_count_and_frequency): Ditto.
	(verify_cgraph_node): Ditto.
	(cgraph_finalize_compilation_unit): Ditto.
	(cgraph_mark_functions_to_output): Ditto.
	(cgraph_expand_function): Ditto.
	(cgraph_output_in_order): Ditto.
	(cgraph_optimize): Ditto.
	(cgraph_copy_node_for_versioning): Ditto.
	(cgraph_materialize_clone): Ditto.
	(cgraph_redirect_edge_call_stmt_to_callee): Ditto.
	* gcov-io.c (gcov_read_summary): Ditto.
	* tree-ssa-alias.c (same_type_for_tbaa): Ditto.
	(refs_may_alias_p_1): Ditto.
	(walk_aliased_vdefs): Ditto.
	* ipa-inline.c (cgraph_mark_inline_edge): Ditto.
	(cgraph_recursive_inlining_p): Ditto.
	(cgraph_edge_badness): Ditto.
	(update_caller_keys): Ditto.
	(cgraph_decide_recursive_inlining): Ditto.
	(cgraph_decide_inlining_of_small_function): Ditto.
	(cgraph_decide_inlining): Ditto.
	(cgraph_decide_inlining_incrementally): Ditto.
	(estimate_function_body_sizes): Ditto.
	* dwarf2out.c (dwarf2out_do_cfi_startproc): Ditto.
	(dwarf2out_begin_prologue): Ditto.
	(dwarf2out_end_epilogue): Ditto.
	(dw_loc_list): Ditto.
	(gen_subprogram_die): Ditto.
	(dwarf2out_source_line): Ditto.
	* c-decl.c (bind): Ditto.
	(pop_scope): Ditto. Ditto.
	(push_file_scope): Ditto.
	(pop_file_scope): Ditto.
	(finish_decl): Ditto.
	(c_write_global_declarations): Ditto.
	* langhooks.c (lhd_do_nothing_f): Ditto.
	(lhd_do_nothing_t_t_return_null_tree): Ditto.
	(lhd_return_null_tree_v): Ditto.
	(lhd_builtin_function): Ditto.
	* function.c (pop_cfun): Ditto.
	(allocate_struct_function): Ditto.
	* profile.c (instrument_values): Ditto.
	(is_edge_inconsistent): Ditto.
	* ipa.c (process_references): Ditto.
	(cgraph_remove_unreachable_nodes): Ditto.
	(function_and_variable_visibility):
	* c-typeck.c (tagged_types_tu_compatible_p): Ditto.
	* gimplify.c (gimplify_addr_expr): Ditto.
	* except.c (sjlj_emit_function_enter): Ditto.
	(output_one_function_exception_table): Ditto.
	* coverage.c (get_gcov_type): Ditto.
	(htab_counts_entry_del): Ditto.
	(read_counts_file): Ditto.
	(get_coverage_counts): Ditto.
	(coverage_checksum_string): Ditto.
	(coverage_begin_output): Ditto.
	(coverage_end_function): Ditto.
	(build_fn_info_type): Ditto.
	(build_fn_info_value): Ditto.
	(build_ctr_info_value): Ditto.
	(build_gcov_info): Ditto.
	(create_coverage): Ditto.
	(coverage_finish): Ditto.
	* tree-sra.c (convert_callers): Ditto.
	(modify_function): Ditto.
	(ipa_early_sra): Ditto.
	* varasm.c (notice_global_symbol): Ditto.
	(assemble_external): Ditto.
	(mark_decl_referenced): Ditto.
	(find_decl_and_mark_needed): Ditto.
	(finish_aliases_1): Ditto.
	(assemble_alias): Ditto.
	* tree-ssa.c (useless_type_conversion_p): Ditto.
	* tree-inline.c (copy_bb): Ditto.
	(copy_edges_for_bb): Ditto.
	(initialize_cfun): Ditto.
	(copy_cfg_body): Ditto.
	(tree_inlinable_function_p): Ditto.
	(optimize_inline_calls): Ditto.
	(copy_tree_r): Ditto.
	* tree-profile.c (init_ic_make_global_vars): Ditto.
	(gimple_init_edge_profiler): Ditto.
	(gimple_gen_ic_profiler): Ditto.
	(gimple_gen_ic_func_profiler): Ditto.
	(tree_profiling): Ditto.
	* opts-global.c (lang_handle_option): Ditto.
	(add_input_filename): Ditto.
	(read_cmdline_options): Ditto.
	* l-ipo.c: Ditto.
	* libgcov.c (gcov_version): Ditto.
	(gcov_exit): Ditto.
	(__gcov_init): Ditto.
	(__gcov_flush): Ditto.
	(__gcov_merge_ior): Ditto.
	(__gcov_one_value_profiler_body): Ditto.
	(__gcov_indirect_call_profiler): Ditto.
	* l-ipo.h: Ditto.
	* tree-cfg.c: (verify_types_in_gimple_reference): Ditto.
	(verify_gimple_call): Ditto.
	(verify_gimple_assign_single): Ditto.
	(verify_gimple_return): Ditto.
	(gimple_verify_flow_info): Ditto.
	* passes.c: (rest_of_decl_compilation): Ditto.
	(init_optimization_passes): Ditto.
	(pass_init_dump_file): Ditto.
	* varpool.c (varpool_node): Ditto.
	(debug_varpool): Ditto.
	(varpool_node_for_asm): Ditto.
	(varpool_enqueue_needed_node): Ditto.
	* stmt.c (expand_asm_operands): Ditto.
	* gcov-dump.c (main): Ditto.
	(print_usage): Ditto.
	(print_prefix): Ditto.
	(dump_file): Ditto.
	(tag_summary): Ditto.

2011-04-19  Guozhi Wei  <carrot@google.com>

	* config/arm/arm.c (SHORTEST_FAR_JUMP_LENGTH): New constant.
	(estimate_function_length): New function.
	(thumb_far_jump_used_p): No far jump is needed in short function.

2011-04-20  Easwaran Raman  <eraman@google.com>

	* gcc.c (asm_options): Pass --save-temps to assembler.

2011-04-19  Martin Thuresson  <martint@google.com>

	* libgcov.c (gcov_version): Do not access filename in struct
	generated from different version.

2011-04-19  Xinliang David Li  <davidxl@google.com>

	* ipa-inline.c (cgraph_decide_recursive_inlining): Fix
	div by zero error with insane profile.

2011-04-17  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 172609.

2011-04-11  Xinliang David Li  <davidxl@google.com>

	* value-profile.c (check_ic_target): New function.
	(gimple_ic_transform): Sanity check indirect call target.
	* gimple-low.c (gimple_check_call_args): Interface change.
	(gimple_check_call_matching_types): New function.
	* tree-inline.c (tree_can_inline_p): Call new function.

2011-04-08  Xinliang David Li  <davidxl@google.com>

	* ipa-cp.c (ipcp_update_profiling): Correct
	 negative scale factor due to insane profile data.

2011-04-08  Xinliang David Li  <davidxl@google.com>

	* final.c (dump_basic_block_info): New function.
	(final): Dump basic block.
	(final_scan_insn): Remove old dump.

2011-03-29  Le-Chun Wu  <lcwu@google.com>

	Merge from branches/annotalysis at r171529.

	Port annotalysis (lock annotations and analysis) from GCC-4.4.3 to
	GCC-4.6 tree.

2011-03-28  Martin Thuresson  <martint@google.com>

	* doc/invoke.texi: Document support for relative profile paths.
	* libgcov.c (gcov_exit): Support relative profile paths.

2011-03-15  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 170988 (gcc-4_6-branch).

2011-03-14  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 170957.

2011-02-26  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration rev 170499.

2011-02-07  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration.

2011-02-04  Diego Novillo  <dnovillo@google.com>

	Merge from google/integration.

	* BASE-VER: Fix.

Copyright (C) 2011 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
